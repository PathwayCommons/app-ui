/**
    Pathway Commons Central Data Cache

    Metadata Parser
    metadataParserJson.js

    Purpose  : To parse the subtree generated by the metadata parser
               into a human readable form

    Requires : Valid metadata subtree

    Effects  : Modifies the data structure of a node to be more human readable

    Note : Script may take time to parse metadata

    @author Harsh Mistry
    @version 1.1 2017/10/17
**/

const treeTraversal = require('./treeTraversal.js');

//Parse database ids
//Requires a subtree consisting of database ID objects
//Note : null is returnd if no ID is found.
function parseDatabaseIDs(subTree) {
  var result = [];

  //Loop through all different database ids
  for (var i = 0; i < subTree.length; i++) {
    //Get Reference Child
    var child = subTree[i][1];

    //Search for database id's 
    var dbIdObject = treeTraversal.searchForExactNode(child, 'Database ID');
    if (dbIdObject) result.push(dbIdObject);
  }

  return result;
}

//Returns a human readable array of metadata
//Requires subtree to be valid
//Note : null is returned if nothing can be parsed
function parse(subTree) {
  var references = [];

  //Validate subtree
  if(!(subTree)) return null; 

  //Make a copy of subtree
  var subTreeCopy = subTree.slice();

  //Get All References
  for (var i = 0; i < references.length; i++){
    if(subTree[i][0] === 'Reference') {
      references.push(subTree[i]);
      subTreeCopy.splice(i, 1);
    }
  }

  //Parse Database ID's
  var parsedIDs = parseDatabaseIDs(references);
  if(parsedIDs) subTreeCopy.push(['Database IDs', parsedIDs]);

  return subTreeCopy;
}

//Export main function
module.exports = parse;

